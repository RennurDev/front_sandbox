{"version":3,"sources":["components/TopHeader.js","components/StartButton.js","components/MapBox.js","functions/InitializeGeoLine.js","functions/DrawGeoLine.js","App.js","reportWebVitals.js","index.js"],"names":["TopHeader","props","state","gameMode","className","this","Component","StartButton","Button","mapboxgl","accessToken","geolocate","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","MapBox","history","previous_location","undefined","min_duration","onGeolocate","bind","obj","prop","Object","prototype","hasOwnProperty","call","_hasProperty","console","log","push","coords","longitude","latitude","elapseTime","parseInt","timestamp","_add","t","item","position","map","length","addSource","addLayer","addGeolocate","logs","getSource","setData","drawGeoLine","Map","container","mapContainer","center","style","zoom","addControl","on","remove","ref","e","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.741f60c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import \"./App.css\"\n\nclass TopHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameMode: '',\n    }\n  }\n  render() {\n    return (\n      <div className=\"TopHeader\">\n        <h1>{this.state.gameMode}</h1>\n        <p>hogehoghoge</p>\n      </div>\n    )\n  }\n}\n\nexport default TopHeader;\n","import React, { Component } from 'react';\nimport { Button } from '@material-ui/core';\n\nclass StartButton extends Component {\n  render() {\n    return (\n      <div className=\"StartButton\">\n        <Button>start</Button>\n      </div>\n    )\n  }\n}\n\nexport default StartButton;\n","import React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl'\nimport '../App.css'\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport drawGeoLine from '../functions/DrawGeoLine';\nimport initializeGeoLine from '../functions/InitializeGeoLine';\n\n// アクセストークン\n// TODO: env系で管理する\n// mapboxgl.accessToken = 'pk.eyJ1IjoiaGF0YWtlNTExNTIyIiwiYSI6ImNrbTA5OHA2bDBxOGwycHE3aGc4NG0zMHcifQ.FzXi8T5KcCXCqMjGBTnV7A'; // 自分の\nmapboxgl.accessToken = 'pk.eyJ1IjoiaXNub3QiLCJhIjoiY2tkemV4MnR2MXRyMDJ4a2pzd2h1eHg1ayJ9.ALgtUeaHBDuvqvOR7008vA';\n\nconst geolocate = new mapboxgl.GeolocateControl({\n  positionOptions: {\n    enableHighAccuracy: true // 高精度な位置情報取得\n  },\n  trackUserLocation: true // ユーザの位置情報追跡\n});\n\n\nexport default class MapBox extends Component {\n  constructor(props) {\n    super(props)\n    this.history = []\n    this.previous_location = undefined\n    this.min_duration = 2\n\n    this.onGeolocate = this.onGeolocate.bind(this) // これないと動かない\n  }\n\n  _hasProperty(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop)\n  }\n\n  _add(geolocate) {\n    if (this._hasProperty(geolocate, 'timestamp')) {\n      console.log(geolocate)\n      this.history.push([geolocate.coords.longitude, geolocate.coords.latitude])\n    }\n  }\n  \n  addGeolocate(geolocate) {\n    const elapseTime = this.previous_location !== undefined ? parseInt((geolocate.timestamp - this.previous_location.timestamp)) : 0\n\n    if (this.previous_location === undefined) {\n      console.log(geolocate)\n      this._add(geolocate) // 測り始め\n      this.previous_location = geolocate;\n    } else if (elapseTime > this.min_duration) {\n      this._add(geolocate) // 経過時間が設定した制限時間をこえたらヒストリ追加\n      this.previous_location = geolocate\n    } else {\n      return;\n    }\n  }\n\n  getUserTrack() {\n    const t = []\n    for (const item of this.history) {\n      t.push([item.coords.longitude, item.coords.latitude])\n    }\n    return t\n  }\n  \n  onGeolocate(position) {\n    console.log(this.history.length);\n    if(this.history.length === 0) {\n      initializeGeoLine(this.map)\n    }\n    this.addGeolocate(position)\n    drawGeoLine(this.history, this.map)\n  }\n\n  componentDidMount() {\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      center: [-96, 37.8],\n      style: 'mapbox://styles/mapbox/streets-v9', // mapのスタイル指定\n      zoom: 8 // おそらく\n    })\n    this.map.addControl(geolocate);\n    geolocate.on('geolocate', this.onGeolocate);\n  }\n\n  componentWillUnmount() {\n    this.map.remove()\n  }\n  \n  render() {\n     return (\n        <div>\n          <div className={'mapContainer'} ref={e => this.mapContainer = e}/>\n        </div>\n     )\n  }\n}\n","export default function InitializeGeoLine(map) {\n  map.addSource('route', {\n    'type': 'geojson',\n    'data': {\n      'type': 'Feature',\n      'properties': {},\n      'geometry': {\n        'type': 'LineString',\n        'coordinates': []\n      }\n    }\n  });\n  map.addLayer({\n    'id': 'route',\n    'type': 'line',\n    'source': 'route',\n    'layout': {\n      'line-join': 'round',\n      'line-cap': 'round'\n    },\n    'paint': {\n      'line-color': '#888',\n      'line-width': 4\n    }\n  });\n}\n","export default function DrawGeoLine(logs, map) {\n  map.getSource('route').setData({\n    'type': 'Feature',\n    'properties': {},\n    'geometry': {\n      'type': 'LineString',\n      'coordinates': logs\n    }\n  });\n}\n","import React, { Component } from 'react';\nimport TopHeader from './components/TopHeader';\nimport StartButton from './components/StartButton';\nimport MapBox from './components/MapBox';\nimport './App.css'\n\n\nclass App extends Component {\n\n  render(){\n    return (\n      <div>\n        <div className=\"App\">\n          <TopHeader\n          gameMode=\"RUNNING\"\n          >\n          </TopHeader>\n          <StartButton></StartButton>\n        </div>\n        <MapBox></MapBox>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}